ARG BASE_VARIANT=alpine

ARG LIBGIT2_IMG
ARG LIBGIT2_TAG

FROM --platform=linux/amd64 ${LIBGIT2_IMG}:${LIBGIT2_TAG} as build-amd64
FROM --platform=linux/arm64 ${LIBGIT2_IMG}:${LIBGIT2_TAG} as build-arm64
FROM --platform=linux/arm/v7 ${LIBGIT2_IMG}:${LIBGIT2_TAG} as build-armv7

FROM --platform=$BUILDPLATFORM build-$TARGETARCH$TARGETVARIANT AS build

RUN apk add clang lld pkgconfig ca-certificates

ARG TARGETPLATFORM

# Some dependencies have to installed 
# for the target platform: https://github.com/tonistiigi/xx#go--cgo
RUN xx-apk add --no-cache \
        musl-dev gcc lld binutils-gold

WORKDIR /root/smoketest
COPY tests/smoketest/go.mod .
COPY tests/smoketest/go.sum .
RUN go mod download

COPY tests/smoketest/main.go .

ENV CGO_ENABLED=1
RUN export LIBRARY_PATH="/usr/local/$(xx-info triple)/lib:/usr/local/$(xx-info triple)/lib64:${LIBRARY_PATH}" && \
    export PKG_CONFIG_PATH="/usr/local/$(xx-info triple)/lib/pkgconfig:/usr/local/$(xx-info triple)/lib64/pkgconfig" && \
	export FLAGS="$(pkg-config --static --libs --cflags libssh2 openssl libgit2)" && \
    CGO_LDFLAGS="${FLAGS} -static" \
	xx-go build \
        -ldflags "-s -w" \
        -tags 'netgo,osusergo,static_build' \
        -o static-test-runner -trimpath main.go;

# Ensure that the generated binary is valid for the target platform
RUN xx-verify --static static-test-runner

# This can be deployed into a gcr.io/distroless/static, however
# the alpine has been chosen so it can run the static application
# using the `RUN` statement.
FROM ${BASE_VARIANT}

RUN apk add git

WORKDIR /root/smoketest
COPY --from=build \
    /root/smoketest/static-test-runner .

ENV SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt

RUN /root/smoketest/static-test-runner
